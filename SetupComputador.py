import pyaudio  # Biblioteca para capturar √°udio do microfone
import numpy as np  # Biblioteca para manipula√ß√£o de arrays num√©ricos
import serial  # Biblioteca para comunica√ß√£o via porta serial (Bluetooth)
import time  # Biblioteca para gerenciar tempos de espera


# Configura√ß√£o do PyAudio para captura de √°udio
CHUNK = 256  # Tamanho do buffer de √°udio (menor valor = menor lat√™ncia)
FORMAT = pyaudio.paInt16  # Formato do √°udio (16 bits por amostra)
CHANNELS = 1  # N√∫mero de canais (1 = mono)
RATE = 44100  # Taxa de amostragem do √°udio (44.1 kHz, padr√£o de CD)


# Configura√ß√£o da comunica√ß√£o Bluetooth
bluetooth_port = "COM6"  # Porta serial do m√≥dulo Bluetooth (ajuste conforme necess√°rio)
baud_rate = 9600  # Taxa de transmiss√£o de dados


# Tentativa de abrir a porta serial para comunica√ß√£o com o Arduino
ser = None  # Vari√°vel para armazenar a conex√£o serial
try:
    ser = serial.Serial(bluetooth_port, baud_rate, timeout=1)  # Abre a porta serial com um tempo limite
    time.sleep(2)  # Aguarda 2 segundos para estabilizar a conex√£o
    print("‚úÖ Bluetooth conectado com sucesso!")  # Mensagem de confirma√ß√£o
except serial.SerialException as e:  # Se houver erro ao abrir a porta serial
    print(f"‚ö† Erro ao abrir a porta serial: {e}")  # Exibe o erro no console
    exit()  # Encerra o programa


# Inicializa√ß√£o do PyAudio para capturar √°udio do microfone
audio = pyaudio.PyAudio()


# Tentativa de abrir o fluxo de √°udio
try:
    stream = audio.open(format=FORMAT, channels=CHANNELS, rate=RATE, input=True, frames_per_buffer=CHUNK)
except Exception as e:  # Caso haja erro ao acessar o microfone
    print(f"‚ö† Erro ao acessar o microfone: {e}")
    exit()  # Encerra o programa


last_volume = -1  # Armazena o √∫ltimo valor enviado para evitar envios repetidos


def get_volume_level(data):
    """
    Calcula o n√≠vel de volume do √°udio capturado.
    Usa a m√©dia quadr√°tica (RMS) para calcular a intensidade do som.
    """
    try:
        # Converte os dados brutos de √°udio para um array de inteiros de 16 bits
        audio_data = np.frombuffer(data, dtype=np.int16)
        
        if len(audio_data) == 0:  # Se n√£o houver dados, retorna 0
            return 0


        # Calcula a intensidade RMS (Root Mean Square) do √°udio
        rms = np.sqrt(np.mean(np.square(audio_data.astype(np.float32))))  
        
        # Normaliza o valor do volume para o intervalo de 0 a 100
        volume_level = min(100, int((2 * rms / (2**15)) * 200))
        
        return volume_level  # Retorna o n√≠vel de volume processado
    except Exception as e:
        print(f"‚ö† Erro ao processar √°udio: {e}")  # Mensagem de erro caso falhe
        return 0  # Retorna 0 em caso de erro


print("üé§ Monitorando √°udio... Pressione Ctrl+C para parar.")  # Mensagem de in√≠cio


# Loop principal para capturar o √°udio continuamente e enviar os dados via Bluetooth
try:
    while True:
        data = stream.read(CHUNK, exception_on_overflow=False)  # Captura um peda√ßo do √°udio do microfone
        volume = get_volume_level(data)  # Calcula o n√≠vel de volume


        # Verifica se a porta serial est√° aberta e evita envios repetitivos
        if ser and ser.is_open and abs(volume - last_volume) > 2:  
            try:
                ser.write(f"{volume}\n".encode('utf-8'))  # Envia o valor via Bluetooth para o Arduino
                print(f"üì§ Enviado: {volume}")  # Exibe o valor enviado no console
                last_volume = volume  # Atualiza o √∫ltimo valor enviado para evitar repeti√ß√£o
            except serial.SerialException as e:
                print(f"‚ö† Erro ao enviar dados: {e}")  # Caso haja erro na transmiss√£o dos dados


except KeyboardInterrupt:  # Captura a interrup√ß√£o do usu√°rio (Ctrl+C)
    print("\n‚èπ Encerrando...")  # Mensagem de encerramento


finally:
    # Finaliza corretamente os recursos abertos
    stream.stop_stream()  # Para a captura de √°udio
    stream.close()  # Fecha o fluxo de √°udio
    audio.terminate()  # Finaliza a inst√¢ncia do PyAudio
    if ser:  # Se a conex√£o Bluetooth estiver aberta, fecha a porta
        ser.close()
    print("üîå Conex√£o finalizada.")  # Mensagem final de encerramento
